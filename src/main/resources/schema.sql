/*
create user sa superuser;
alter user sa password 'password';
create database filmorate with owner sa;
*/
CREATE TABLE IF NOT EXISTS films (
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title varchar NOT NULL,
    description varchar(200),
    release_date date NOT NULL,
    duration int NOT NULL CHECK (duration > 0),
	UNIQUE (title, description, release_date, duration)
);
CREATE UNIQUE INDEX IF NOT EXISTS film_id_idx ON films (film_id);

CREATE TABLE IF NOT EXISTS genres (
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre varchar NOT NULL CHECK (genre != '') UNIQUE
);
CREATE UNIQUE INDEX IF NOT EXISTS genre_id_idx ON genres (genre_id);

CREATE TABLE IF NOT EXISTS film_genre (
    film_genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id INTEGER REFERENCES films (film_id) ON DELETE CASCADE,
    genre_id INTEGER REFERENCES genres (genre_id) ON DELETE CASCADE,
	UNIQUE (film_id, genre_id)
);
CREATE UNIQUE INDEX IF NOT EXISTS film_genre_id_idx ON film_genre (film_genre_id);

CREATE TABLE IF NOT EXISTS ratings_MPA (
    rating_MPA_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rating_MPA varchar NOT NULL CHECK (rating_MPA != '') UNIQUE
);
CREATE UNIQUE INDEX IF NOT EXISTS rating_MPA_id_idx ON ratings_MPA (rating_MPA_id);

CREATE TABLE IF NOT EXISTS film_rating_MPA (
    film_rating_MPA_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id INTEGER REFERENCES films (film_id) ON DELETE CASCADE,
    rating_MPA_id INTEGER REFERENCES ratings_MPA (rating_MPA_id) ON DELETE CASCADE,
	UNIQUE (film_id, rating_MPA_id)
);
CREATE UNIQUE INDEX IF NOT EXISTS film_rating_MPA_id_idx ON film_rating_MPA (film_rating_MPA_id);

CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    login varchar NOT NULL CHECK (login != '') UNIQUE,
    name varchar CHECK (name != ''),
    email varchar NOT NULL CHECK (email LIKE '%@%.%') UNIQUE,
    birthday date NOT NULL CHECK (birthday < CURRENT_DATE),
	UNIQUE (login, name, email, birthday)
);
CREATE UNIQUE INDEX IF NOT EXISTS user_id_idx ON users (user_id);

CREATE TABLE IF NOT EXISTS film_likes (
    film_like_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id INTEGER REFERENCES films (film_id) ON DELETE CASCADE,
    user_id INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
	CONSTRAINT unique_film_id_user_id UNIQUE (film_id, user_id)
);
CREATE UNIQUE INDEX IF NOT EXISTS film_like_id_idx ON film_likes (film_like_id);

CREATE TABLE IF NOT EXISTS friendship_status (
    friendship_status_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    status varchar CHECK (status IN ('Неподтверждённая', 'Подтверждённая')) UNIQUE
);       
CREATE UNIQUE INDEX IF NOT EXISTS friendship_status_id_idx ON friendship_status (friendship_status_id);

CREATE TABLE IF NOT EXISTS user_friends (
    user_friend_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
    friend_id INTEGER REFERENCES users (user_id) ON DELETE CASCADE,
    friendship_status_id INTEGER REFERENCES friendship_status (friendship_status_id) ON DELETE CASCADE,
	UNIQUE (user_id, friend_id, friendship_status_id),
	UNIQUE (user_id, friend_id)
);
CREATE UNIQUE INDEX IF NOT EXISTS user_friend_id_idx ON user_friends (user_friend_id);

INSERT INTO ratings_MPA (rating_MPA)
VALUES ('G'),
        ('PG'),
        ('PG-13'),
        ('R'),
        ('NC-17')
ON CONFLICT (rating_MPA) DO NOTHING;

INSERT INTO genres (genre)
VALUES ('Комедия'),
        ('Драма'),
        ('Мультфильм'),
        ('Триллер'),
        ('Документальный'),
        ('Боевик')
ON CONFLICT (genre) DO NOTHING;

INSERT INTO films (title, description, release_date, duration)
VALUES ('Побег из Шоушенка', 
		'Бухгалтер Энди Дюфрейн обвинён в убийстве собственной жены и её любовника. 
		Оказавшись в тюрьме Шоушенк, он сталкивается с жестокостью и беззаконием, 
		царящими по обе стороны решётки.',
		'1994-09-10', 
		142),
		('Крёстный отец', 
		'Криминальная сага, повествующая о нью-йоркской сицилийской мафиозной семье Корлеоне. 
		 Фильм охватывает период 1945-1955 годов.',
		'1972-03-14', 
		175),
		('Темный рыцарь', 
		'Бэтмен поднимает ставки в войне с криминалом. 
		 С помощью лейтенанта Джима Гордона и прокурора Харви Дента он намерен очистить улицы Готэма от преступности.',
		'2008-07-14', 
		152),
		('Крёстный отец 2', 
		'В центре драмы представители нового поколения гангстерского клана — дона Корлеоне и его сына, 
		 для которых не существует моральных преград на пути достижения поставленых целей.',
		'1974-12-12', 
		202),
		('12 рaзгневанных мужчин', 
		'Юношу обвиняют в убийстве собственного отца, ему грозит электрический стул.
		 Двенадцать присяжных собираются чтобы вынести вердикт: виновен или нет.',
		'1957-04-10',
		96),
		('Список Шиндлера', 
		'Лента рассказывает реальную историю загадочного Оскара Шиндлера, 
		 члена нацистской партии, преуспевающего фабриканта, 
		 спасшего во время Второй мировой войны более тысячи ста евреев.',
		'1993-11-30',
		195),
		('Властелин колец: Возвращение короля', 
		'Повелитель сил тьмы Саурон направляет свою бесчисленную армию под стены Минас-Тирита, 
		 крепости Последней Надежды.',
		'2003-12-01',
		201),
		('Криминальное чтиво', 
		'Двое бандитов Винсент Вега и Джулс Винфилд ведут философские беседы в перерывах между разборками и 
		 решением проблем с должниками криминального босса Марселласа Уоллеса.',
		'1994-05-21',
		154),
		('Властелин колец: Братство кольца', 
		'Сказания о Средиземье — это хроника Великой войны за Кольцо, войны, длившейся не одну тысячу лет. 
		 Тот, кто владел Кольцом, получал власть над всеми живыми тварями, но был обязан служить злу.',
		'2001-12-10',
		178),
		('Хороший, плохой, злой', 
		'Сказания о Средиземье — это хроника Великой войны за Кольцо, войны, длившейся не одну тысячу лет. 
		 Тот, кто владел Кольцом, получал власть над всеми живыми тварями, но был обязан служить злу.',
		'1966-12-23',
		161)
ON CONFLICT (title, description, release_date, duration) DO NOTHING;

INSERT INTO film_genre (film_id, genre_id)
VALUES (1, 2),
		(2, 2),
		(3, 6),
		(4, 2),
		(5, 2),
		(6, 2),
		(6, 5),
		(7, 6),
		(8, 1),
		(8, 2),
		(9, 6),
		(10, 6)
ON CONFLICT (film_id, genre_id) DO NOTHING;

INSERT INTO film_rating_mpa (film_id, rating_mpa_id)
VALUES (1, 4),
		(2, 4),
		(3, 3),
		(4, 4),
		(5, 3),
		(6, 4),
		(7, 3),
		(8, 4),
		(9, 3),
		(10, 4)
ON CONFLICT (film_id, rating_mpa_id) DO NOTHING;

INSERT INTO users (login, name, email, birthday)
VALUES ('BadComedian', 'Евгений Баженов', 'BadComedian@gmail.com', '1991-05-24'),
		('ADolin', 'Антон Долин', 'DolinAnton@yandex.ru', '1976-01-23'),
		('Disney', 'Уолт Дисней', 'WaltDisneyProductions@gmail.com', '1901-12-05'),
		('StarTrek', 'Джин Родденберри', 'StarTrek@yahoo.com', '1901-12-05'),
		('Pokemon', 'Сатоси Тадзири', 'pokemon@yahoo.com', '1965-08-28')
ON CONFLICT (login, name, email, birthday) DO NOTHING;

INSERT INTO film_likes (film_id, user_id)
VALUES (1, 1),
		(1, 2),
		(1, 3),
		(1, 4),
		(1, 5),
		(2, 1),
		(2, 2),
		(2, 3),
		(2, 4),
		(3, 1),
		(3, 2),
		(3, 3),
		(4, 4),
		(4, 5),
		(5, 5),
		(6, 1),
		(7, 2),
		(8, 3),
		(9, 4),
		(10, 5)
ON CONFLICT (film_id, user_id) DO NOTHING;

INSERT INTO friendship_status (status)
VALUES ('Неподтверждённая'),
		('Подтверждённая')
ON CONFLICT (status) DO NOTHING;

INSERT INTO user_friends (user_id, friend_id, friendship_status_id)
VALUES (1, 2, 2),
		(1, 3, 2),
		(1, 4, 2),
		(1, 5, 2),
		(5, 1, 2),
		(5, 2, 2),
		(5, 3, 2),
		(5, 4, 2),
		(2, 3, 1),
		(3, 4, 1),
		(2, 1, 2),
		(3, 1, 2),
		(4, 1, 2),
		(1, 5, 2),
		(5, 1, 2),
		(2, 5, 2),
		(3, 5, 2),
		(4, 5, 2),
		(3, 2, 1),
		(4, 3, 1)
ON CONFLICT (user_id, friend_id, friendship_status_id) DO NOTHING;