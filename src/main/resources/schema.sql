CREATE TABLE IF NOT EXISTS ratings_MPA (
    rating_MPA_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rating_MPA varchar NOT NULL CHECK (rating_MPA != '') UNIQUE
);

CREATE TABLE IF NOT EXISTS films (
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title varchar NOT NULL UNIQUE,
    description varchar(200) UNIQUE,
    release_date date NOT NULL,
    duration int NOT NULL CHECK (duration > 0),
    rating_MPA_id INTEGER REFERENCES ratings_MPA (rating_MPA_id) ON DELETE RESTRICT,
    rate int CHECK (rate > 0)
);

CREATE TABLE IF NOT EXISTS genres (
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre varchar NOT NULL CHECK (genre != '') UNIQUE
);

CREATE TABLE IF NOT EXISTS films_genres (
    film_id INTEGER REFERENCES films (film_id) ON DELETE RESTRICT,
    genre_id INTEGER REFERENCES genres (genre_id) ON DELETE RESTRICT,
    CONSTRAINT IF NOT EXISTS pk_film_genre PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    login varchar NOT NULL CHECK (login != '') UNIQUE,
    name varchar CHECK (name != ''),
    email varchar NOT NULL CHECK (email LIKE '%@%.%') UNIQUE,
    birthday date NOT NULL CHECK (birthday <= CURRENT_DATE)
);

CREATE TABLE IF NOT EXISTS films_likes (
    film_id INTEGER REFERENCES films (film_id) ON DELETE RESTRICT,
    user_id INTEGER REFERENCES users (user_id) ON DELETE RESTRICT,
    CONSTRAINT IF NOT EXISTS pk_film_likes PRIMARY KEY (film_id, user_id),
    CONSTRAINT IF NOT EXISTS check_user_id CHECK (user_id > 0)
);

CREATE TABLE IF NOT EXISTS users_friends (
    user_id INTEGER REFERENCES users (user_id) ON DELETE RESTRICT,
    friend_id INTEGER REFERENCES users (user_id) ON DELETE RESTRICT,
    friendship_status BOOLEAN,
    CONSTRAINT IF NOT EXISTS pk_user_friends PRIMARY KEY (user_id, friend_id)
);

CREATE OR REPLACE VIEW FILMS_RATINGS_MPA_VIEW AS
SELECT f.film_id,
       f.title,
       f.description,
       f.release_date,
       f.duration,
       f.rating_MPA_id,
       rm.rating_MPA,
       f.rate
FROM films f
LEFT OUTER JOIN ratings_MPA rm ON f.rating_MPA_id = rm.rating_MPA_id;

CREATE OR REPLACE VIEW FILMS_GENRES_VIEW AS
SELECT f.film_id,
       g.genre_id,
       g.genre
FROM films f
         LEFT OUTER JOIN films_genres fg on f.film_id = fg.film_id
         LEFT OUTER JOIN genres g on g.genre_id = fg.genre_id;