CREATE TABLE IF NOT EXISTS ratings_MPA (
    rating_MPA_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rating_MPA varchar NOT NULL CHECK (rating_MPA != '') UNIQUE
);
CREATE UNIQUE INDEX IF NOT EXISTS rating_MPA_id_idx ON ratings_MPA (rating_MPA_id);

CREATE TABLE IF NOT EXISTS films (
    film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title varchar NOT NULL UNIQUE,
    description varchar(200) UNIQUE,
    release_date date NOT NULL,
    duration int NOT NULL CHECK (duration > 0),
    rating_MPA_id INTEGER REFERENCES ratings_MPA (rating_MPA_id) ON DELETE RESTRICT,
    rate int CHECK (rate > 0)
);
CREATE UNIQUE INDEX IF NOT EXISTS film_id_idx ON films (film_id);

CREATE TABLE IF NOT EXISTS genres (
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genre varchar NOT NULL CHECK (genre != '') UNIQUE
);
CREATE UNIQUE INDEX IF NOT EXISTS genre_id_idx ON genres (genre_id);

CREATE TABLE IF NOT EXISTS film_genre (
    film_id INTEGER REFERENCES films (film_id) ON DELETE RESTRICT,
    genre_id INTEGER REFERENCES genres (genre_id) ON DELETE RESTRICT,
    CONSTRAINT pk_film_genre PRIMARY KEY (film_id, genre_id)
);
CREATE UNIQUE INDEX IF NOT EXISTS film_id_genre_id_idx ON film_genre (film_id, genre_id);

CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    login varchar NOT NULL CHECK (login != '') UNIQUE,
    name varchar CHECK (name != ''),
    email varchar NOT NULL CHECK (email LIKE '%@%.%') UNIQUE,
    birthday date NOT NULL CHECK (birthday <= CURRENT_DATE)
);
CREATE UNIQUE INDEX IF NOT EXISTS user_id_idx ON users (user_id);

CREATE TABLE IF NOT EXISTS film_likes (
    film_id INTEGER REFERENCES films (film_id) ON DELETE RESTRICT,
    user_id INTEGER REFERENCES users (user_id) ON DELETE RESTRICT,
    CONSTRAINT pk_film_likes PRIMARY KEY (film_id, user_id)
);
CREATE UNIQUE INDEX IF NOT EXISTS film_id_user_id_idx ON film_likes (film_id, user_id);

CREATE TABLE IF NOT EXISTS user_friends (
    user_id INTEGER REFERENCES users (user_id) ON DELETE RESTRICT,
    friend_id INTEGER REFERENCES users (user_id) ON DELETE RESTRICT,
    friendship_status BOOLEAN,
    CONSTRAINT pk_user_friends PRIMARY KEY (user_id, friend_id)
);
CREATE UNIQUE INDEX IF NOT EXISTS user_friend_id_idx ON user_friends (user_id, friend_id);

CREATE OR REPLACE VIEW FILMS_RATING_MPA_VIEW AS
SELECT f.film_id,
       f.TITLE,
       f.DESCRIPTION,
       f.RELEASE_DATE,
       f.DURATION,
       f.RATING_MPA_ID,
       rm.RATING_MPA,
       f.rate
FROM FILMS f
LEFT OUTER JOIN RATINGS_MPA rm ON f.RATING_MPA_ID = rm.RATING_MPA_ID;

CREATE OR REPLACE VIEW FILMS_GENRES_VIEW AS
SELECT f.film_id,
       g.genre_id,
       g.genre
FROM FILMS f
         LEFT OUTER JOIN FILM_GENRE fg on f.FILM_ID = fg.FILM_ID
         LEFT OUTER JOIN GENRES g on g.GENRE_ID = fg.GENRE_ID;