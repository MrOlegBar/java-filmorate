CREATE TABLE IF NOT EXISTS ratings_MPA (
    rating_MPA_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    rating_MPA VARCHAR NOT NULL CHECK (rating_MPA != '') UNIQUE
);

CREATE TABLE IF NOT EXISTS films (
film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
title VARCHAR NOT NULL UNIQUE,
description VARCHAR(200) UNIQUE,
release_date DATE NOT NULL,
duration INTEGER NOT NULL CHECK (duration > 0),
rating_MPA_id INTEGER,
rate INTEGER,
FOREIGN KEY (rating_MPA_id) REFERENCES ratings_MPA (rating_MPA_id) ON DELETE NO ACTION
);

CREATE TABLE IF NOT EXISTS genres (
genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
genre VARCHAR NOT NULL CHECK (genre != '') UNIQUE
);

CREATE TABLE IF NOT EXISTS films_genres (
film_id INTEGER,
genre_id INTEGER,
PRIMARY KEY (film_id, genre_id),
FOREIGN KEY (film_id) REFERENCES films (film_id) ON DELETE NO ACTION,
FOREIGN KEY (genre_id) REFERENCES genres (genre_id) ON DELETE NO ACTION
);

CREATE TABLE IF NOT EXISTS users (
user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
login VARCHAR NOT NULL CHECK (login != '') UNIQUE,
name VARCHAR CHECK (name != ''),
email VARCHAR NOT NULL CHECK (email ILIKE '%@%.%') UNIQUE,
birthday DATE NOT NULL CHECK (birthday <= CURRENT_DATE)
);

CREATE TABLE IF NOT EXISTS films_likes (
film_id INTEGER,
user_id INTEGER,
PRIMARY KEY (film_id, user_id),
FOREIGN KEY (film_id) REFERENCES films (film_id) ON DELETE NO ACTION,
FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE NO ACTION
);

CREATE TABLE IF NOT EXISTS users_friends (
user_id INTEGER,
friend_id INTEGER,
friendship_status BOOLEAN,
PRIMARY KEY (user_id, friend_id),
FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE NO ACTION,
FOREIGN KEY (friend_id) REFERENCES users (user_id) ON DELETE NO ACTION
);

CREATE OR REPLACE VIEW films_ratings_mpa_view AS
SELECT f.film_id,
       f.title,
       f.description,
       f.release_date,
       f.duration,
       f.rating_MPA_id,
       rm.rating_MPA,
       f.rate
FROM films f
LEFT OUTER JOIN ratings_MPA rm ON f.rating_MPA_id = rm.rating_MPA_id;

CREATE OR REPLACE VIEW films_genres_view AS
SELECT f.film_id,
       fg.genre_id,
       g.genre
FROM films f
LEFT OUTER JOIN films_genres fg ON f.film_id = fg.film_id
LEFT OUTER JOIN genres g ON g.genre_id = fg.genre_id;